#!/usr/bin/env python3
"""
Process benchmark results generated by the running the CPU2006 benchmarks with
the RunCPU2006CrossARM script.
Example: ./RunCPU2006CrossARM | ./GenCPU2006CrossARM > result
"""
from __future__ import print_function
from optparse import OptionParser
from statistics import median, stdev
import sys
import re
from functools import reduce

BENCH_START_REGEX = re.compile("Running (\S+)")
BENCH_USER_TIME_REGEX = re.compile("user\t(\S+)")

# Statistics about the running time of a single benchmark
class BenchData:
    def __init__(self, name):
        self.name = name
        self.userTimes = []
        self.userTimeMedian = None
        self.userTimeStdev = None

    # Find the median runtime
    def findUserMedianTime(self):
        self.userTimeMedian = median(self.userTimes)

    # Find the standard deviation of the user times
    def findUserStdev(self):
        self.userTimeStdev = stdev(self.userTimes)

    # Find all statistics for user time
    def findAllUserTimeStats(self):
        self.findUserMedianTime()
        self.findUserStdev()

# Print benchstats in csv format
def printBenchStatsCSV(iterations, benchesStats):
    # Median benchmark runtimes
    medians = []

    print ("Benchmarks:,", end='')
    # Print benchmark names
    for entry in benchesStats:
        print (',' + benchesStats[entry].name, end='')

    # Print benchmark runtimes
    for i in range(iterations):
        print("\n,", end='')
        for entry in benchesStats:
            print(',' + str(round(benchesStats[entry].userTimes[i], 2)), end='')

    # Print median runtime
    print("\nMedian:,", end='')
    for entry in benchesStats:
        medians.append(benchesStats[entry].userTimeMedian)
        print(',' + str(round(benchesStats[entry].userTimeMedian, 2)), end='')

    # Print stdev
    print ("\nStandard Deviation:,", end='')
    for entry in benchesStats:
        print(',' + str(round(benchesStats[entry].userTimeStdev, 2)), end='')

    # Print %stdev
    print ("\n% Stdev (RSD):,", end='')
    for entry in benchesStats:
        print(',' + str(round(benchesStats[entry].userTimeStdev / benchesStats[entry].userTimeMedian * 100, 2)) + '%', end='')

    # Print geo mean of medians
    print ("\nGeo Mean:,,", end='')
    print (round(reduce(lambda x, y: x*y, medians)**(1.0/len(medians)), 2), end='')

    # End
    print("\n", end='')


# Find time in seconds from linux time utility default format (xxmx.xxs)
def parseTime(time):
    splitM = time.split('m')
    minutes = float(splitM[0])
    seconds = float(splitM[1][:-1])
    return 60.0 * minutes + seconds

# Find "BenchData" for a single benchmark
def parseBench(linesIter, benchData):
    for line in linesIter:
        # Look for the user runtime for the benchmark
        findBenchUserTime = BENCH_USER_TIME_REGEX.findall(line)
        if (findBenchUserTime != []):
            userTime = findBenchUserTime[0]
            benchData.userTimes.append(parseTime(userTime))
            return

    raise Exception("Could not find runtime for benchmark \"" + benchData.name + "\"")

# Find "BenchData" for all benchmarks within "inData"
def parseData(inData):
    benchesData = {}
    linesIter = inData.split("\n").__iter__()
    for line in linesIter:
        # Look for the start of a new benchmark
        findBenchDataStart = BENCH_START_REGEX.findall(line)
        if (findBenchDataStart != []):
            benchName = findBenchDataStart[0]
            if benchName not in benchesData:
                benchData = BenchData(benchName)
                benchesData[benchName] = benchData
            benchData = parseBench(linesIter, benchesData[benchName])

    return benchesData

def main(args):
    # Read input data from file or stdin
    try:
        # If argument to cl opt -i is '-' read from stdin
        if (args.infile == '-'):
            inData = sys.stdin
        # Otherwise Read data from file
        if (args.infile):
            inData = open(args.infile)
        # If there is no cl opt -i, default to reading from stdin
        elif (sys.stdin):
            inData = sys.stdin

        benchesData = parseData(inData.read())
        # Find usertime stats
        for entry in benchesData:
            benchesData[entry].findAllUserTimeStats()
        # Print bench data in csv format
        printBenchStatsCSV(3, benchesData)

    except IOError:
        msg = ("Unable to read input data. Does the input file exist?")
        inData.close()
        return
    finally:
        inData.close()


if __name__ == '__main__':
    parser = OptionParser(
        description='Generate stats from running the CPU2006 benchmarks with RunCPU2006CrossARM')
    parser.add_option('-i', '--infile',
                      metavar='filepath',
                      help='Where to find the test run direcotires.')

    main(parser.parse_args()[0])
