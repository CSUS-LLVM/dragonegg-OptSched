/*******************************************************************************
Description:  Defines a scheduling region for basic blocks whose scheduler takes
              into account the cost of spilled registers.
Author:       Ghassan Shobaki
Created:      Unknown
Last Update:  Apr. 2011
*******************************************************************************/

#ifndef OPTSCHED_SPILL_BB_SPILL_H
#define OPTSCHED_SPILL_BB_SPILL_H

#include "llvm/CodeGen/OptSched/generic/defines.h"
#include "llvm/CodeGen/OptSched/sched_region/sched_region.h"

namespace opt_sched {

class LengthCostEnumerator;
class EnumTreeNode;
class Register;
class RegisterFile;
class BitVector;

class BBWithSpill : public SchedRegion {
  private:
    LengthCostEnumerator* enumrtr_;

    InstCount crntSpillCost_;
    InstCount optmlSpillCost_;

    bool enblStallEnum_;
    int spillCostFactor_;
    int schedCostFactor_;

    int16_t regTypeCnt_;
    RegisterFile* regFiles_;
    BitVector* liveRegs_;

    //Virtual Functions:
    //Given a schedule, compute the cost function value
    InstCount CmputNormCost_(InstSchedule* sched, COST_COMP_MODE compMode,
                               InstCount& execCost);
    InstCount CmputCost_(InstSchedule* sched, COST_COMP_MODE compMode,
                           InstCount& execCost);
    void CmputSchedUprBound_();
    Enumerator* AllocEnumrtr_(Milliseconds timeout);
    FUNC_RESULT Enumerate_(Milliseconds deadline);
    void SetupForSchdulng_();
    void InitForSchdulng_();
    void FinishHurstc_();
    void FinishOptml_();
    void CmputAbslutUprBound_();
    ListScheduler* AllocLstSchdulr_();

    //BBWithSpill-specific Functions:
    InstCount CmputCostLwrBound_(InstCount schedLngth);
    InstCount CmputCostLwrBound_();
    void InitForCostCmputtn_();
    InstCount CmputDynmcCost_();

    void UpdateSpillInfoForSchdul_(SchedInstruction* inst);
    void UpdateSpillInfoForUnSchdul_(SchedInstruction* inst);

  public:
    BBWithSpill(MachineModel* machMdl, DataDepGraph* dataDepGraph, long rgnNum,
                int16_t sigHashSize, LB_ALG lbAlg, LISTSCHED_HEURISTIC hurstc,
                LISTSCHED_HEURISTIC enumHurstc, bool vrfySched, Pruning prune,
                bool enblStallEnum, int spillCostFactor);
    ~BBWithSpill();

    FUNC_RESULT BuildFromFile();

    int CmputCostLwrBound();

    InstCount UpdtOptmlSched(InstSchedule* crntSched,
                             LengthCostEnumerator* enumrtr);
    bool ChkCostFsblty(InstCount trgtLngth, EnumTreeNode* treeNode,
                       SchedInstruction* schduldInst,
                       LinkedList<SchedInstruction>* tightndInsts,
                       bool updtAll, InstCount& cost, InstCount& costLB,
                       LengthCostEnumerator* enumrtr);
    void SchdulInst(SchedInstruction* inst, InstCount cycleNum,
                    InstCount slotNum, bool ntfyPaths);
    void UnschdulInst(SchedInstruction* inst, InstCount cycleNum,
                      InstCount slotNum, EnumTreeNode* trgtNode);
    void SetSttcLwrBounds(EnumTreeNode* node);
};

} // end namespace opt_sched

#endif
