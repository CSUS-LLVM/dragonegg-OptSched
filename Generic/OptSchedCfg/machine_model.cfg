MODEL_NAME: x86-NHM

#Sum of limits for individual issue types 
ISSUE_RATE: 1

# The limit on the total number of instructions that can be issued in one cycle
ISSUE_SLOT_COUNT: 1

ISSUE_TYPE_COUNT: 1

# Default issue type for LLVM instructions
Default 1

DEP_LATENCY_ANTI: 0
DEP_LATENCY_OUTPUT: 1
DEP_LATENCY_OTHER: 1

# This will not be used. Reg type info will be taken from the compiler
REG_TYPE_COUNT: 2
I 8
F 8

# Set this to the total number of instructions
INST_TYPE_COUNT: 46

#1
INST_TYPE: ADD64rr
ISSUE_TYPE: Default
LATENCY: 1
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES


#2
INST_TYPE: IMUL64rr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#3
# integer division uses the FPDIV unit, which is connected to the
# same port as the FPMUL unit
INST_TYPE: IDIV32r
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#4
INST_TYPE: ADDSSrr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#5
INST_TYPE: MULSSrr
ISSUE_TYPE: Default
LATENCY: 4
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#6
INST_TYPE: DIVSSrr
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES


############################### MOV INSTRUCTIONS (LOAD, STORE or INT)? ####################
## I assume that MOV instructions with reg, reg operands use INT otherwise its a load or store... right?!

#7
INST_TYPE: MOV64rm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#8
INST_TYPE: MOV64mr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#9
INST_TYPE: MOV64mi32
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#10
INST_TYPE: MOV32rm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#11
INST_TYPE: MOV32mr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#12
INST_TYPE: MOV32mi
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

################################ CHECK THE CMOV (BR or INT)? ###############################
#13
INST_TYPE: CMOVG64rr
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#14
INST_TYPE: CMOVL64rr
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#15
INST_TYPE: CMOVG32rr
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

########################### CHECK FOR THE reg, mem OPERAND INSTRUCTIONS? IMUL or LOAD ??? ################################

#16
INST_TYPE: IMUL64rm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#17
INST_TYPE: IMUL32rr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#18
INST_TYPE: IMUL32rm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

############## I assume that MOVSDrm and MOVSSrm use LOAD... ########################

#19
INST_TYPE: MOVSDrm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#20
INST_TYPE: MOVSSrm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#21
INST_TYPE: MOVSDmr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#22
INST_TYPE: MOVSDrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#23
INST_TYPE: ADDSDrr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#24
INST_TYPE: SUBSDrr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#25
INST_TYPE: SUBSSrr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#26
INST_TYPE: MULSDrr
ISSUE_TYPE: Default
LATENCY: 6
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#27
INST_TYPE: DIVSDrr
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#28
INST_TYPE: SQRTSDr
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#29
INST_TYPE: SQRTSSr
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#30
INST_TYPE: DIVSDrm
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#31
INST_TYPE: ADD32rr
ISSUE_TYPE: Default
LATENCY: 1
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#32
INST_TYPE: ADD64rm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#33
INST_TYPE: ADD32rm
ISSUE_TYPE: Default
LATENCY: 2
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#34
INST_TYPE: ADDSDrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#35
INST_TYPE: ADDSSrr
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#36
INST_TYPE: ADDSSrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#37
INST_TYPE: SUBSDrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#38
INST_TYPE: ADDSSrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#39
INST_TYPE: SUBSSrm
ISSUE_TYPE: Default
LATENCY: 3
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#40
INST_TYPE: CVTSS2SDrr
ISSUE_TYPE: Default
LATENCY: 4
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#41
INST_TYPE: CVTSI2SDrr
ISSUE_TYPE: Default
LATENCY: 6
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#42
INST_TYPE: MULSSrm
ISSUE_TYPE: Default
LATENCY: 4
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#43
INST_TYPE: MULSDrr
ISSUE_TYPE: Default
LATENCY: 5
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#44
INST_TYPE: MULSDrm
ISSUE_TYPE: Default
LATENCY: 5
PIPELINED: YES
BLOCKS_CYCLE: NO
SUPPORTED: YES

#45
INST_TYPE: DIVSSrr
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES

#46
INST_TYPE: DIVSSrm
ISSUE_TYPE: Default
LATENCY: 7
PIPELINED: NO
BLOCKS_CYCLE: NO
SUPPORTED: YES
